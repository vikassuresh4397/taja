Props and State are two important concepts in React.js, a JavaScript library for building user interfaces.

Props are inputs to a component. They are passed from a parent component to a child component and can be used to render dynamic data. Props are read-only, which means that a component cannot modify its props.

State, on the other hand, is mutable data that is managed within a component. State is used to track changes to a component and can cause a component to re-render when it changes. Unlike props, a component can modify its state using setState().

The useState API is a hook in React that allows functional components to have state. It returns an array with two elements, the current state value and a function to update the state value.

The map(), filter(), and reduce() methods are higher-order functions in JavaScript that can be used to manipulate arrays.

map() takes an array and transforms each element of the array into a new value, returning a new array with the transformed values.

filter() takes an array and filters out elements that do not meet a certain condition, returning a new array with only the filtered values.

reduce() takes an array and reduces it to a single value by iterating over the elements and updating an accumulator value.

Here is an example of how to attach these methods to the Array prototype chain in JavaScript:

javascript
Copy code
Array.prototype.myMap = function(callback) {
  let arr = [];
  for (let i = 0; i < this.length; i++) {
    arr.push(callback(this[i], i, this));
  }
  return arr;
};

Array.prototype.myFilter = function(callback) {
  let arr = [];
  for (let i = 0; i < this.length; i++) {
    if (callback(this[i], i, this)) {
      arr.push(this[i]);
    }
  }
  return arr;
};

Array.prototype.myReduce = function(callback, initialValue) {
  let accumulator = initialValue;
  for (let i = 0; i < this.length; i++) {
    accumulator = callback(accumulator, this[i], i, this);
  }
  return accumulator;
};